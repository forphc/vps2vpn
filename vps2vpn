#!/bin/bash

_echo_info() { echo -e " [\033[1;32mi\033[0m] $1 "; }
_echo_error() { echo -e " [\033[1;31mX\033[0m] $1 "; }

[[ $EUID -ne 0 ]] && _echo_error "This script needs to be run as root, exiting..." && exit 1

# Check if distro is Ubuntu 18.04 or later or Debian 9 stretch or later
source /etc/os-release
if [[ $ID == "ubuntu" ]]; then
	if [[ ${VERSION_ID%%.*} -lt 18 ]]; then
		_echo_error "This script is only compatible with Ubuntu 18.04 or later"
		exit 1
	fi
elif [[ $ID == "debian" ]]; then
	if [[ ${VERSION_ID%%.*} -lt 9 ]]; then
		_echo_error "This script is only compatible with Debian 9 or later"
		exit 1
	fi
else
	_echo_error "This script is only compatible with Ubuntu 18.04 or later or Debian 9 or later" >&2
	exit 1
fi

PUBLIC_IP=$(wget -4qO - api.ipify.org)
IFACE=$(ip route get 8.8.8.8 | awk -- '{printf $5}')
CONF_LINK="https://raw.githubusercontent.com/forphc/vps2vpn/main/configs"
DROPBEAR_PORT='143'
SQUID_PORT='7777'
PRIVOXY_PORT='8000'
ZIPROXY_PORT='8080'
STUNNEL_DROPBEAR_PORT='442'
STUNNEL_OVPN_PORT='444'
OVPN_TCP_PORT='1194'
OVPN_UDP_PORT='1196'
NGINX_PORT='85'
BADVPN_PORT='7300'

cd $HOME
clear
echo
read -rp " Proceed installation? [Y/n]: "
[[ $REPLY =~ [nN] ]] && echo " Cancelled, exiting..." && exit
export DEBIAN_FRONTEND=noninteractive
T1="$(date +%s)"

_echo_info "Updating packages..."
apt-get update --fix-missing && apt-get upgrade -y

_echo_info "Starting installation..."
_echo_info "This will take up some time, please be patient..."
sleep 3

apt-get install -y build-essential cmake unzip jq libssl-dev liblzo2-dev libnl-genl-3-dev libcap-ng-dev libsystemd-dev libpam0g-dev pkg-config nginx
_openvpn() {
	wget -qO openvpn.tar.gz "https://swupdate.openvpn.net/community/releases/openvpn-2.6.14.tar.gz"
	tar xzf openvpn.tar.gz && rm -f openvpn.tar.gz
	cd openvpn-2.6.14
	./configure --enable-systemd --disable-lz4
	make -j$(nproc)
	make install
	cd $HOME
	rm -rf openvpn-2.6.14

	rm -rf /etc/openvpn/server && mkdir -p /etc/openvpn/server
	rm -rf /var/log/openvpn && mkdir -p /var/log/openvpn

	wget 'https://raw.githubusercontent.com/forphc/vps2vpn/main/rsa-1024.zip'
	unzip -q -d '/etc/openvpn' rsa-1024.zip && rm -f rsa-1024.zip

	for item in "server_tcp" "server_udp"; do
		wget -qO /etc/openvpn/server/"$item".conf "$CONF_LINK"/"$item".conf
		printf "\nplugin %s /etc/pam.d/login" "$(find /usr -name openvpn-plugin-auth-pam.so | head -1)" | tee -a /etc/openvpn/server/"$item".conf &>/dev/null
		sed -i "s/OVPN_TCP_PORT/${OVPN_TCP_PORT}/;s/OVPN_UDP_PORT/${OVPN_UDP_PORT}/" /etc/openvpn/server/"$item".conf
		
		rm -f /lib/systemd/system/openvpn-server@"$item".service
		cat >> /lib/systemd/system/openvpn-server@"$item".service << END
[Unit]
Description=OpenVPN service for %I
After=syslog.target network-online.target
Wants=network-online.target
Documentation=man:openvpn(8)
Documentation=https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage
Documentation=https://community.openvpn.net/openvpn/wiki/HOWTO

[Service]
Type=notify
PrivateTmp=true
WorkingDirectory=/etc/openvpn/server
ExecStart=$(which openvpn) --status %t/openvpn-server/status-%i.log --status-version 2 --suppress-timestamps --config %i.conf
CapabilityBoundingSet=CAP_IPC_LOCK CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_SETGID CAP_SETUID CAP_SYS_CHROOT CAP_DAC_OVERRIDE CAP_AUDIT_WRITE
LimitNPROC=10
DeviceAllow=/dev/null rw
DeviceAllow=/dev/net/tun rw
ProtectSystem=true
ProtectHome=true
KillMode=process
RestartSec=5s
Restart=on-failure

[Install]
WantedBy=multi-user.target
END
	done
	systemctl daemon-reload

	# Nginx configuration for ovpn config DL site
	rm -f /etc/nginx/conf.d/ovpn.conf
	cat >> /etc/nginx/conf.d/ovpn.conf << END
server {
	listen 0.0.0.0:${NGINX_PORT};
	server_name localhost;
	root /var/www/openvpn;
	index index.html;
}
END
	rm -rf /etc/nginx/sites-*
	rm -rf /var/www/openvpn && mkdir -p /var/www/openvpn
	wget -qO /var/www/openvpn/index.html "$CONF_LINK"/index.html

	local CLIENT_CONFIG=(client_tcp.ovpn client_udp.ovpn)
	local OPENVPN_SERVER_VERSION=$(openvpn --version | grep -w "^OpenVPN" | awk '{print $2}')
	local ISP=$(wget -qO - http://ipwhois.app/json/ | jq -r '.isp')
	local COUNTRY=$(wget -qO - http://ipwhois.app/json/ | jq -r '.country')
	local REGION=$(wget -qO - http://ipwhois.app/json/ | jq -r '.region')
	local DATE=$(date +%m-%d-%Y)
	for ovpn in "${CLIENT_CONFIG[@]}"; do
		wget -qO /var/www/openvpn/"$ovpn" "$CONF_LINK"/"$ovpn"
		echo -e "\n<ca>" >> /var/www/openvpn/"$ovpn"
		tee -a /var/www/openvpn/"$ovpn" < /etc/openvpn/ca.crt >/dev/null
		echo "</ca>" >> /var/www/openvpn/"$ovpn"
		sed -i "s/OVPN_VERSION/${OPENVPN_SERVER_VERSION}/;s/SERVER_ISP/${ISP}/;s/COUNTRY/${REGION}, ${COUNTRY}/;s/PUBLIC_IP/${PUBLIC_IP}/g;s/DATE/${DATE}/" /var/www/openvpn/"$ovpn"
		sed -i "s/OVPN_TCP_PORT/${OVPN_TCP_PORT}/g;s/OVPN_UDP_PORT/${OVPN_UDP_PORT}/g;s/PRIVOXY_PORT/${PRIVOXY_PORT}/g" /var/www/openvpn/"$ovpn"
	done
}
_openvpn &>/dev/null &

_badvpn() {
	local ZIP="1.999.130.zip"
	rm -f "$ZIP"
	wget -q 'https://github.com/ambrop72/badvpn/archive/refs/tags/1.999.130.zip'
	unzip -q "$ZIP" && rm -f "$ZIP"
	cd badvpn-1.999.130
	mkdir build && cd build
	cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/ -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1
	make install
	cd $HOME
	rm -rf badvpn-1.999.130
	rm -f /lib/systemd/system/badvpn-udpgw.service
	wget -qO /lib/systemd/system/badvpn-udpgw.service "$CONF_LINK"/badvpn-udpgw.service
	sed -i "s/BADVPN_PORT/${BADVPN_PORT}/" /lib/systemd/system/badvpn-udpgw.service
}
_badvpn &>/dev/null &

_fail2ban() {
	wget -qO fail2ban.tar.gz "https://github.com/fail2ban/fail2ban/archive/refs/tags/1.1.0.tar.gz"
	tar xzf fail2ban.tar.gz && rm -f fail2ban.tar.gz
	cd fail2ban-1.1.0
	python setup.py install
	cp build/fail2ban.service /etc/systemd/system/fail2ban.service
	cd /etc/fail2ban
	cp fail2ban.conf fail2ban.local
	mv jail.conf jail.conf.bak
	mv fail2ban.conf fail2ban.conf.bak
	wget -qO jail.local "$CONF_LINK"/jail.local
	cd $HOME && rm -rf fail2ban-1.1.0
}
_fail2ban &>/dev/null &

apt-get install -y curl net-tools zip iptables-persistent dos2unix cmatrix\
 perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python3 shared-mime-info libxml-parser-perl \
 dropbear squid privoxy ziproxy stunnel4

wget -qO neofetch.tar.gz "https://github.com/dylanaraps/neofetch/archive/refs/tags/7.1.0.tar.gz"
tar xzf neofetch.tar.gz && rm -f neofetch.tar.gz
cd neofetch-7.1.0
make install
cd $HOME
rm -rf neofetch-7.1.0

_configurations() {
	sed -i "s/NO_START=.*/NO_START=0/;s/DROPBEAR_PORT=.*/DROPBEAR_PORT=${DROPBEAR_PORT}/;s/DROPBEAR_BANNER=.*/DROPBEAR_BANNER='\/etc\/banner'/" /etc/default/dropbear
	rm -f /etc/banner && touch /etc/banner

	mv /etc/squid/squid.conf /etc/squid/squid.conf.bak
	wget -qO /etc/squid/squid.conf "$CONF_LINK"/squid.conf
	sed -i "s/PUBLIC_IP/${PUBLIC_IP}/g;s/SQUID_PORT/${SQUID_PORT}/g" /etc/squid/squid.conf

	mv /etc/privoxy/config /etc/privoxy/config.bak
	wget -qO /etc/privoxy/config "$CONF_LINK"/privoxy_config
	sed -i "s/PUBLIC_IP/${PUBLIC_IP}/g;s/PRIVOXY_PORT/${PRIVOXY_PORT}/g" /etc/privoxy/config

	mv /etc/ziproxy/ziproxy.conf /etc/ziproxy/ziproxy.conf.bak
	cat >> /etc/ziproxy/ziproxy.conf << END
Port = ${ZIPROXY_PORT}
Address = "127.0.0.1"
END

	mkdir -p /var/log/stunnel
	mv /etc/stunnel/stunnel.conf /etc/stunnel/stunnel.conf.bak
	wget -qO /etc/stunnel/stunnel.conf "$CONF_LINK"/stunnel.conf
	sed -i "s/STUNNEL_DROPBEAR_PORT/${STUNNEL_DROPBEAR_PORT}/;s/STUNNEL_OVPN_PORT/${STUNNEL_OVPN_PORT}/" /etc/stunnel/stunnel.conf
	sed -i "s/DROPBEAR_PORT/${DROPBEAR_PORT}/;s/OVPN_TCP_PORT/${OVPN_TCP_PORT}/" /etc/stunnel/stunnel.conf

	rm -f /etc/stunnel/stunnel.pem
	wget -qO /etc/stunnel/stunnel.pem "$CONF_LINK"/stunnel.pem
	sed -i "s/ENABLED=0/ENABLED=1/" /etc/default/stunnel4


	wget -qO /tmp/menu.txt "$CONF_LINK"/menu/menu.txt
	while read -r FILE; do
		rm -f /usr/local/sbin/"$FILE"
		wget -qO /usr/local/sbin/"$FILE" "$CONF_LINK"/menu/"$FILE"
		chmod 755 /usr/local/sbin/"$FILE"
		dos2unix /usr/local/sbin/"$FILE"
	done < /tmp/menu.txt
	rm -f /tmp/menu.txt

	[[ ! $(grep '/bin/false' /etc/shells) ]] && echo "/bin/false" >> /etc/shells
	[[ ! $(grep '/usr/sbin/nologin' /etc/shells) ]] && echo "/usr/sbin/nologin" >> /etc/shells

	if [[ $(sysctl net.ipv4.ip_forward | awk -F'= ' '{print $2}') -eq 0 ]]; then
		echo 1 > /proc/sys/net/ipv4/ip_forward
		echo "net.ipv4.ip_forward=1" >> /etc/sysctl.d/custom.conf
		sysctl -p /etc/sysctl.d/custom.conf &> /dev/null
	fi

	timedatectl set-timezone Asia/Manila

	wget -qO $HOME/.delexp.sh "$CONF_LINK"/delexp.sh && chmod 755 $HOME/.delexp.sh

	crontab -l > mycron &>/dev/null
	cat >> mycron << END
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
0 1 * * * $HOME/.delexp.sh &>>$HOME/.delexp.log
END
	crontab mycron && rm mycron
	systemctl enable cron &>/dev/null

	echo -e "clear\nneofetch" > /etc/profile.d/login.sh
}
_configurations &>/dev/null &

wget -qO webmin_latest.deb http://www.webmin.com/download/deb/webmin-current.deb
dpkg --install webmin_latest.deb
rm -f webmin_latest.deb
sed -i "s/ssl=1/ssl=0/" /etc/webmin/miniserv.conf

_echo_info "Waiting for background processes to finish..."
wait

_echo_info "Firing up services..."
SERVICE_NAME=(dropbear squid privoxy ziproxy nginx stunnel4 webmin openvpn-server@server_tcp openvpn-server@server_udp badvpn-udpgw fail2ban)
systemctl daemon-reload
for service in "${SERVICE_NAME[@]}"; do
	systemctl enable "$service" &>/dev/null
	systemctl restart "$service" &>/dev/null
done

RULES="/etc/iptables/rules.v4"
iptables-save > "$RULES"

[[ $(grep -c -- "-A POSTROUTING -s 10.8.0.0/16 -o "$IFACE" -j MASQUERADE" "$RULES") -eq 0 ]] && iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o "$IFACE" -j MASQUERADE
[[ $(grep -c -- "-A POSTROUTING -s 10.8.0.0/16 -o "$IFACE" -j SNAT --to-source "$PUBLIC_IP"" "$RULES") -eq 0 ]] && iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o "$IFACE" -j SNAT --to-source "$PUBLIC_IP"
[[ $(grep -c -- "-A FORWARD -s 10.8.0.0/16 -j ACCEPT" "$RULES") -eq 0 ]] && iptables -A FORWARD -s 10.8.0.0/16 -j ACCEPT

iptables-save > "$RULES"
netfilter-persistent save &> /dev/null
systemctl enable netfilter-persistent &> /dev/null

T2=$(date +%s)
TF=$(( T2 - T1 ))
clear
echo ''
echo " Installation complete"
echo -e " Duration: \033[1;32m$(date -d@$TF +%Mmin:%Ssec)\033[0m"
echo -e " Access management panel using the command → \033[1;32mmenu\033[0m"
echo ''
echo " A system reboot will be made to apply changes"
read -n1 -srp " Press enter to proceed"
rm -f vpsphcv2
reboot

